[{"author":null,"categories":null,"content":null,"date":1738195200,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1738195200,"objectID":"88bbbb0d741115df58687e3af85f923a","permalink":"https://LL1105.github.io/post/redis%E9%99%90%E6%B5%81%E4%BD%BF%E7%94%A8redis-cluster%E7%AA%81%E7%A0%B4%E5%8D%95redis%E9%99%90%E6%B5%81%E7%93%B6%E9%A2%88/","publishdate":"2025-01-30T00:00:00Z","readingtime":3,"relpermalink":"/post/redis%E9%99%90%E6%B5%81%E4%BD%BF%E7%94%A8redis-cluster%E7%AA%81%E7%A0%B4%E5%8D%95redis%E9%99%90%E6%B5%81%E7%93%B6%E9%A2%88/","section":"post","summary":"概述 当我们借助Redis实现分布式限流时，通常会根据将一个限流key放在一个Redis节点上，例如使用Redission的限流： RRateLimiter rateLimiter = redissonClient.getRateLimiter(\u0026#34;rate:limiter:key\u0026#34;); rateLimiter.trySetRate( RateType.OVERALL,","tags":["Redis"],"title":"Redis限流——使用Redis Cluster突破单Redis限流瓶颈","type":"post","url":"/post/redis%E9%99%90%E6%B5%81%E4%BD%BF%E7%94%A8redis-cluster%E7%AA%81%E7%A0%B4%E5%8D%95redis%E9%99%90%E6%B5%81%E7%93%B6%E9%A2%88/","weight":0,"wordcount":1056},{"author":null,"categories":null,"content":" ","date":1726358400,"description":" ","dir":"post/","excerpt_html":" ","excerpt_text":" ","expirydate":-62135596800,"fuzzywordcount":2900,"html":" ","keywords":null,"kind":"page","lang":"en","lastmod":1726358400,"objectID":"35911f3c4fe3beee73eff16aa930e9e2","permalink":"https://LL1105.github.io/post/%E8%AF%A6%E8%A7%A3springmvc%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/","publishdate":"2024-09-15T00:00:00Z","readingtime":6,"relpermalink":"/post/%E8%AF%A6%E8%A7%A3springmvc%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/","section":"post","summary":"前言 在Spring MVC中，处理一个Web请求的流程被设计得非常清晰且高效，从客户端的请求发送到最终的响应返回，整个过程涵盖了多个核心组件的","tags":["Spring","SpringMVC"],"title":"详解SpringMVC处理流程","type":"post","url":"/post/%E8%AF%A6%E8%A7%A3springmvc%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/","weight":0,"wordcount":2850},{"author":null,"categories":null,"content":null,"date":1725148800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1725148800,"objectID":"48f6d2b82f008a27a297f0f033bf5345","permalink":"https://LL1105.github.io/post/%E5%B8%A6%E6%9D%83%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/","publishdate":"2024-09-01T00:00:00Z","readingtime":3,"relpermalink":"/post/%E5%B8%A6%E6%9D%83%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/","section":"post","summary":"带权轮询负载均衡业务场景 负载均衡是在请求资源时，当资源有多个，我们应该请求哪一个才能让资源利用率最大化的方法。 轮询是最简单粗暴的一种策略，这","tags":["负载均衡"],"title":"带权轮询负载均衡探讨","type":"post","url":"/post/%E5%B8%A6%E6%9D%83%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/","weight":0,"wordcount":1218},{"author":null,"categories":null,"content":null,"date":1546992000,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1546992000,"objectID":"2f05902e7435de187bb5303fb74f55e2","permalink":"https://LL1105.github.io/post/readme/","publishdate":"2019-01-09T00:00:00Z","readingtime":2,"relpermalink":"/post/readme/","section":"post","summary":"Clean White Theme for Hugo CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live demo site using this theme. It is based on huxblog Jekyll Theme and Clean Blog Jekyll Theme. These two upstream projects have done awesome jobs to create a blog theme, what I\u0026rsquo;m doing here is porting it to Hugo, of which I like the simplicity and the much faster","tags":null,"title":"Clean White Theme for Hugo","type":"post","url":"/post/readme/","weight":0,"wordcount":953},{"author":null,"categories":["Tech"],"content":"介绍Istio v1alpha3 routing API及其设计原则","date":1528070400,"description":"介绍Istio v1alpha3 routing API及其设计原则","dir":"post/","excerpt_html":"介绍Istio v1alpha3 routing API及其设计原则","excerpt_text":"介绍Istio v1alpha3 routing API及其设计原则","expirydate":-62135596800,"fuzzywordcount":5500,"html":"介绍Istio v1alpha3 routing API及其设计原则","keywords":null,"kind":"page","lang":"en","lastmod":1528070400,"objectID":"419548ad13183dac6d96760c9815824b","permalink":"https://LL1105.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/","publishdate":"2018-06-04T00:00:00Z","readingtime":11,"relpermalink":"/2018/06/04/introducing-the-istio-v1alpha3-routing-api/","section":"post","summary":"\u003cp\u003e到目前为止，Istio提供了一个简单的API来进行流量管理，该API包括了四种资源：RouteRule，DestinationPolicy，EgressRule和Ingress（直接使用了Kubernets的Ingress资源）。借助此API，用户可以轻松管理Istio服务网格中的流量。该API允许用户将请求路由到特定版本的服务，为弹性测试注入延迟和失败，添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。\u003c/p\u003e","tags":["Istio"],"title":"Istio v1aplha3 routing API介绍(译文）","type":"post","url":"/2018/06/04/introducing-the-istio-v1alpha3-routing-api/","weight":0,"wordcount":5412},{"author":null,"categories":["Tech"],"content":"在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：","date":1527897600,"description":"在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：","dir":"post/","excerpt_html":"在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：","excerpt_text":"在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：","expirydate":-62135596800,"fuzzywordcount":1800,"html":"在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：","keywords":null,"kind":"page","lang":"en","lastmod":1527897600,"objectID":"5419b65011b3dcb9020c0728e6d70695","permalink":"https://LL1105.github.io/2018/06/02/istio08/","publishdate":"2018-06-02T00:00:00Z","readingtime":4,"relpermalink":"/2018/06/02/istio08/","section":"post","summary":"\u003cblockquote\u003e\n\u003cp\u003e在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：\u003c/p\u003e\n\u003c/blockquote\u003e","tags":["Istio"],"title":"Istio 0.8 Release发布","type":"post","url":"/2018/06/02/istio08/","weight":0,"wordcount":1796},{"author":null,"categories":["Tips"],"content":"Everything about setting up my own ubuntu desktop, it's just a Note in case I need it later","date":1527120000,"description":"Everything about setting up my own ubuntu desktop, it's just a Note in case I need it later","dir":"post/","excerpt_html":"Everything about setting up my own ubuntu desktop, it's just a Note in case I need it later","excerpt_text":"Everything about setting up my own ubuntu desktop, it's just a Note in case I need it later","expirydate":-62135596800,"fuzzywordcount":200,"html":"Everything about setting up my own ubuntu desktop, it's just a Note in case I need it later","keywords":null,"kind":"page","lang":"en","lastmod":1527120000,"objectID":"acef740336515250f115284b46f1f096","permalink":"https://LL1105.github.io/2018/05/24/set_up_my_ubuntu_desktop/","publishdate":"2018-05-24T00:00:00Z","readingtime":1,"relpermalink":"/2018/05/24/set_up_my_ubuntu_desktop/","section":"post","summary":"Generate SSH Key Pair ssh-keygen -C \u0026#34;zhaohuabing@gmail.com\u0026#34; Shadowsocks Install shadowsokcs sudo apt-get install python3-pip sudo pip3 install shadowsocks Create config at config/shadowsocks.json, with the following content: { \u0026#34;server\u0026#34;:\u0026#34;remote-shadowsocks-server-ip-addr\u0026#34;, \u0026#34;server_port\u0026#34;:443, \u0026#34;local_address\u0026#34;:\u0026#34;127.0.0.1\u0026#34;, \u0026#34;local_port\u0026#34;:1080, \u0026#34;password\u0026#34;:\u0026#34;your-passwd\u0026#34;, \u0026#34;timeout\u0026#34;:300, \u0026#34;method\u0026#34;:\u0026#34;aes-256-cfb\u0026#34;, \u0026#34;fast_open\u0026#34;:false, \u0026#34;workers\u0026#34;:1 } Start a local socks proxy sudo sslocal -c config/shadowsocks.json -d start In case there is an openssl error, modify shadowsocks source file. sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py :%s/cleanup/reset/gc Convert shadowsocks socks proxy to http proxy","tags":["ubuntu"],"title":"Everything about Setting Up My Ubuntu Desktop","type":"post","url":"/2018/05/24/set_up_my_ubuntu_desktop/","weight":0,"wordcount":121},{"author":null,"categories":["Tech"],"content":"一些外部的第三方系统可能需要访问系统内部的微服务。例如在网上商店的例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。","date":1527098400,"description":"一些外部的第三方系统可能需要访问系统内部的微服务。例如在网上商店的例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。","dir":"post/","excerpt_html":"一些外部的第三方系统可能需要访问系统内部的微服务。例如在网上商店的例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。","excerpt_text":"一些外部的第三方系统可能需要访问系统内部的微服务。例如在网上商店的例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。","expirydate":-62135596800,"fuzzywordcount":2400,"html":"一些外部的第三方系统可能需要访问系统内部的微服务。例如在网上商店的例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。","keywords":null,"kind":"page","lang":"en","lastmod":1527098400,"objectID":"bcf92db93ffdd43ba91e4322cf6c6ece","permalink":"https://LL1105.github.io/2018/05/23/external_system_auth/","publishdate":"2018-05-23T18:00:00Z","readingtime":5,"relpermalink":"/2018/05/23/external_system_auth/","section":"post","summary":"外部系统访问控制 除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的","tags":["Microservice","Security"],"title":"微服务安全沉思录之三","type":"post","url":"/2018/05/23/external_system_auth/","weight":0,"wordcount":2340},{"author":null,"categories":["Tech"],"content":"除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问,根据应用系统数据敏感程度不同，对于系统内微服务的访问也需要进行相应的安全控制。","date":1527087600,"description":"除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问,根据应用系统数据敏感程度不同，对于系统内微服务的访问也需要进行相应的安全控制。","dir":"post/","excerpt_html":"除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问,根据应用系统数据敏感程度不同，对于系统内微服务的访问也需要进行相应的安全控制。","excerpt_text":"除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问,根据应用系统数据敏感程度不同，对于系统内微服务的访问也需要进行相应的安全控制。","expirydate":-62135596800,"fuzzywordcount":2000,"html":"除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问,根据应用系统数据敏感程度不同，对于系统内微服务的访问也需要进行相应的安全控制。","keywords":null,"kind":"page","lang":"en","lastmod":1527087600,"objectID":"d7d93ee7d2a2b13ec20c157389fd7a3a","permalink":"https://LL1105.github.io/2018/05/23/service_2_service_auth/","publishdate":"2018-05-23T15:00:00Z","readingtime":4,"relpermalink":"/2018/05/23/service_2_service_auth/","section":"post","summary":"\u003ch2 id=\"服务间认证与鉴权\"\u003e服务间认证与鉴权\u003c/h2\u003e\n\u003cp\u003e除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户间接触发的微服务之间的相互访问\u003c!-- raw HTML omitted --\u003e\n例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。\u003c/li\u003e\n\u003cli\u003e非用户触发的微服务之间的相互访问\u003c!-- raw HTML omitted --\u003e\n例如数据同步或者后台定时任务导致的微服务之间的相互访问。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。\u003c/p\u003e","tags":["Microservice","Security"],"title":"微服务安全沉思录之二","type":"post","url":"/2018/05/23/service_2_service_auth/","weight":0,"wordcount":1935},{"author":null,"categories":["Tech"],"content":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。在这一系列博客里面将分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。","date":1527069600,"description":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。在这一系列博客里面将分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。","dir":"post/","excerpt_html":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。在这一系列博客里面将分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。","excerpt_text":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。在这一系列博客里面将分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。","expirydate":-62135596800,"fuzzywordcount":3100,"html":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。在这一系列博客里面将分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。","keywords":null,"kind":"page","lang":"en","lastmod":1527069600,"objectID":"3fc17cbcf909103e423326182d72a807","permalink":"https://LL1105.github.io/2018/05/22/user_authentication_authorization/","publishdate":"2018-05-23T10:00:00Z","readingtime":7,"relpermalink":"/2018/05/22/user_authentication_authorization/","section":"post","summary":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在","tags":["Microservice","Security"],"title":"微服务安全沉思录之一","type":"post","url":"/2018/05/22/user_authentication_authorization/","weight":0,"wordcount":3030},{"author":null,"categories":["Tech"],"content":"Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。 Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。","date":1527033600,"description":"Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。 Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。","dir":"post/","excerpt_html":"Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。 Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。","excerpt_text":"Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。 Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。","expirydate":-62135596800,"fuzzywordcount":1200,"html":"Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。 Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。","keywords":null,"kind":"page","lang":"en","lastmod":1527033600,"objectID":"61cbee2b7380aaa6e9b9f882840da6a0","permalink":"https://LL1105.github.io/2018/05/23/istio-auto-injection-with-webhook/","publishdate":"2018-05-23T00:00:00Z","readingtime":3,"relpermalink":"/2018/05/23/istio-auto-injection-with-webhook/","section":"post","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003eKubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。\u003c/p\u003e\n\u003cp\u003e使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。\u003c/p\u003e\n\u003cp\u003eIstio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。\u003c/p\u003e","tags":["Kubernetes","Istio"],"title":"Istio Sidecar自动注入原理","type":"post","url":"/2018/05/23/istio-auto-injection-with-webhook/","weight":0,"wordcount":1133},{"author":null,"categories":["Life"],"content":null,"date":1525132800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1525132800,"objectID":"14429f8bcce027e828700689f3857119","permalink":"https://LL1105.github.io/2018/05/01/may-day-jiulonghu/","publishdate":"2018-05-01T00:00:00Z","readingtime":8,"relpermalink":"/2018/05/01/may-day-jiulonghu/","section":"post","summary":"\u003ch2 id=\"寻浮云牧场不遇\"\u003e寻浮云牧场不遇\u003c/h2\u003e\n\u003cp\u003e五一节前的一周内，几个朋友就纷纷坐不住了，一个二个不再安心上班，开始在微信群里讨论过节要到哪里耍。\n大家思来想去，最后决定还是去理县方向。因为根据多年自驾的经验，只要出了汶川，沿途都是风景。\u003c/p\u003e","tags":["Travel"],"title":"川西秘境探险","type":"post","url":"/2018/05/01/may-day-jiulonghu/","weight":0,"wordcount":3568},{"author":null,"categories":["Tech"],"content":"Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。","date":1523890800,"description":"Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。","dir":"post/","excerpt_html":"Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。","excerpt_text":"Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。","expirydate":-62135596800,"fuzzywordcount":5000,"html":"Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。","keywords":null,"kind":"page","lang":"en","lastmod":1523890800,"objectID":"8160a1bd8df0fbf81c4f36a3c6e7d3af","permalink":"https://LL1105.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/","publishdate":"2018-04-16T15:00:00Z","readingtime":10,"relpermalink":"/2018/04/16/using-helm-to-deploy-to-kubernetes/","section":"post","summary":"前言 Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Hel","tags":["Kubernetes","Helm"],"title":"Helm介绍","type":"post","url":"/2018/04/16/using-helm-to-deploy-to-kubernetes/","weight":0,"wordcount":4996},{"author":null,"categories":["Tech"],"content":"API Gateway和Service Mesh的关系是我最近一直在思考的问题，也和同事及社区的朋友之间进行了一些讨论。这篇短文很清晰地总结了两者之间的相似之处以及这两者在微服务架构中的不同用途。","date":1523439120,"description":"API Gateway和Service Mesh的关系是我最近一直在思考的问题，也和同事及社区的朋友之间进行了一些讨论。这篇短文很清晰地总结了两者之间的相似之处以及这两者在微服务架构中的不同用途。","dir":"post/","excerpt_html":"API Gateway和Service Mesh的关系是我最近一直在思考的问题，也和同事及社区的朋友之间进行了一些讨论。这篇短文很清晰地总结了两者之间的相似之处以及这两者在微服务架构中的不同用途。","excerpt_text":"API Gateway和Service Mesh的关系是我最近一直在思考的问题，也和同事及社区的朋友之间进行了一些讨论。这篇短文很清晰地总结了两者之间的相似之处以及这两者在微服务架构中的不同用途。","expirydate":-62135596800,"fuzzywordcount":1700,"html":"API Gateway和Service Mesh的关系是我最近一直在思考的问题，也和同事及社区的朋友之间进行了一些讨论。这篇短文很清晰地总结了两者之间的相似之处以及这两者在微服务架构中的不同用途。","keywords":null,"kind":"page","lang":"en","lastmod":1523439120,"objectID":"10512631762a4eb4fe14a47b7cb61d54","permalink":"https://LL1105.github.io/2018/04/11/service-mesh-vs-api-gateway/","publishdate":"2018-04-11T09:32:00Z","readingtime":4,"relpermalink":"/2018/04/11/service-mesh-vs-api-gateway/","section":"post","summary":"Service Mesh vs API Gateway 在前一篇关于Service Mesh的文章中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章","tags":["Microservice","Service Mesh","API Gateway"],"title":"Service Mesh 和 API Gateway的关系探讨（译文）","type":"post","url":"/2018/04/11/service-mesh-vs-api-gateway/","weight":0,"wordcount":1697},{"author":null,"categories":["Tech"],"content":"作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性,本文介绍了Service Mesh模式如何应对微服务架构的这些挑战，以及Service Mesh的明星开源项目Istio。","date":1522324800,"description":"作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性,本文介绍了Service Mesh模式如何应对微服务架构的这些挑战，以及Service Mesh的明星开源项目Istio。","dir":"post/","excerpt_html":"作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性,本文介绍了Service Mesh模式如何应对微服务架构的这些挑战，以及Service Mesh的明星开源项目Istio。","excerpt_text":"作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性,本文介绍了Service Mesh模式如何应对微服务架构的这些挑战，以及Service Mesh的明星开源项目Istio。","expirydate":-62135596800,"fuzzywordcount":8500,"html":"作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性,本文介绍了Service Mesh模式如何应对微服务架构的这些挑战，以及Service Mesh的明星开源项目Istio。","keywords":null,"kind":"page","lang":"en","lastmod":1522324800,"objectID":"58e1fcbb286268d60015d8695e72e3b4","permalink":"https://LL1105.github.io/2018/03/29/what-is-service-mesh-and-istio/","publishdate":"2018-03-29T12:00:00Z","readingtime":17,"relpermalink":"/2018/03/29/what-is-service-mesh-and-istio/","section":"post","summary":"\u003ch2 id=\"微服务架构的演进\"\u003e微服务架构的演进\u003c/h2\u003e\n\u003cp\u003e作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。\u003c/p\u003e\n\u003cp\u003e另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。\u003c/p\u003e","tags":["Microservice","Service Mesh","Istio"],"title":"谈谈微服务架构中的基础设施：Service Mesh与Istio","type":"post","url":"/2018/03/29/what-is-service-mesh-and-istio/","weight":0,"wordcount":8405},{"author":null,"categories":["Tips"],"content":"如何配置docker使用HTTP代理","date":1520964000,"description":"如何配置docker使用HTTP代理","dir":"post/","excerpt_html":"如何配置docker使用HTTP代理","excerpt_text":"如何配置docker使用HTTP代理","expirydate":-62135596800,"fuzzywordcount":100,"html":"如何配置docker使用HTTP代理","keywords":null,"kind":"page","lang":"en","lastmod":1520964000,"objectID":"98b8057999561a04d562f017fde4df05","permalink":"https://LL1105.github.io/2018/03/13/use-docker-behind-http-proxy/","publishdate":"2018-03-13T18:00:00Z","readingtime":1,"relpermalink":"/2018/03/13/use-docker-behind-http-proxy/","section":"post","summary":"\u003ch2 id=\"ubuntu\"\u003eUbuntu\u003c/h2\u003e\n\u003ch3 id=\"设置docker使用http-proxy\"\u003e设置docker使用http proxy\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo /etc/default/docker\n\nexport http_proxy=\u0026#34;http://127.0.0.1:3128/\u0026#34;\nexport https_proxy=\u0026#34;http://127.0.0.1:3128/\u0026#34;\nexport HTTP_PROXY=\u0026#34;http://127.0.0.1:3128/\u0026#34;\nexport HTTPS_PROXY=\u0026#34;http://127.0.0.1:3128/\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e","tags":["Tips","Docker"],"title":"如何配置docker使用HTTP代理","type":"post","url":"/2018/03/13/use-docker-behind-http-proxy/","weight":0,"wordcount":92},{"author":null,"categories":["Tips"],"content":"Vim Tips and tricks","date":1518174000,"description":"Vim Tips and tricks","dir":"post/","excerpt_html":"Vim Tips and tricks","excerpt_text":"Vim Tips and tricks","expirydate":-62135596800,"fuzzywordcount":200,"html":"Vim Tips and tricks","keywords":null,"kind":"page","lang":"en","lastmod":1518174000,"objectID":"2d0e4272390337188b486ff2335caebb","permalink":"https://LL1105.github.io/2018/02/09/vim-tips/","publishdate":"2018-02-09T11:00:00Z","readingtime":1,"relpermalink":"/2018/02/09/vim-tips/","section":"post","summary":"\u003ch2 id=\"vim-graphical-cheat-sheet\"\u003evim graphical cheat sheet\u003c/h2\u003e\n\u003cp\u003e\n  \u003cimg src=\"//img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg\" alt=\"\"\u003e\n\n\u003c/p\u003e","tags":["Tips","Vim"],"title":"Vim Tips","type":"post","url":"/2018/02/09/vim-tips/","weight":0,"wordcount":181},{"author":null,"categories":["Tips"],"content":"如何使用非root用户执行docker命令","date":1518170400,"description":"如何使用非root用户执行docker命令","dir":"post/","excerpt_html":"如何使用非root用户执行docker命令","excerpt_text":"如何使用非root用户执行docker命令","expirydate":-62135596800,"fuzzywordcount":100,"html":"如何使用非root用户执行docker命令","keywords":null,"kind":"page","lang":"en","lastmod":1518170400,"objectID":"92d7e3e34329f74a5a955e31f5743bae","permalink":"https://LL1105.github.io/2018/02/09/docker-without-sudo/","publishdate":"2018-02-09T10:00:00Z","readingtime":1,"relpermalink":"/2018/02/09/docker-without-sudo/","section":"post","summary":"Add the docker group if it doesn\u0026rsquo;t already exist: sudo groupadd docker Add the connected user \u0026ldquo;$USER\u0026rdquo; to the docker group. Change the user name to match your preferred user if you do not want to use your current user: sudo gpasswd -a $USER docker Either do a newgrp docker or log out/in to activate the changes to groups.","tags":["Tips","Docker"],"title":"如何使用非root用户执行docker命令","type":"post","url":"/2018/02/09/docker-without-sudo/","weight":0,"wordcount":59},{"author":null,"categories":["Tech"],"content":"微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。","date":1517659200,"description":"微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。","dir":"post/","excerpt_html":"微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。","excerpt_text":"微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。","expirydate":-62135596800,"fuzzywordcount":5500,"html":"微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。","keywords":null,"kind":"page","lang":"en","lastmod":1517659200,"objectID":"c1d32da205ea082b3dd7061c39ea7e8b","permalink":"https://LL1105.github.io/2018/05/22/user_authentication_authorization/","publishdate":"2018-02-03T12:00:00Z","readingtime":11,"relpermalink":"/2018/05/22/user_authentication_authorization/","section":"post","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。\u003c/p\u003e","tags":["Microservice","Security"],"title":"如何构建安全的微服务应用？","type":"post","url":"/2018/05/22/user_authentication_authorization/","weight":0,"wordcount":5434},{"author":null,"categories":["Tech"],"content":"Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。本文介绍如何采用kubeadmin安装kubernetes集群并部署Nginmesh sidecar。","date":1514894400,"description":"Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。本文介绍如何采用kubeadmin安装kubernetes集群并部署Nginmesh sidecar。","dir":"post/","excerpt_html":"Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。本文介绍如何采用kubeadmin安装kubernetes集群并部署Nginmesh sidecar。","excerpt_text":"Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。本文介绍如何采用kubeadmin安装kubernetes集群并部署Nginmesh sidecar。","expirydate":-62135596800,"fuzzywordcount":2700,"html":"Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。本文介绍如何采用kubeadmin安装kubernetes集群并部署Nginmesh sidecar。","keywords":null,"kind":"page","lang":"en","lastmod":1514894400,"objectID":"f12f8e4e5417662ca5f2745b62aadb1e","permalink":"https://LL1105.github.io/2018/01/02/nginmesh-install/","publishdate":"2018-01-02T12:00:00Z","readingtime":6,"relpermalink":"/2018/01/02/nginmesh-install/","section":"post","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eNginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。\u003c/p\u003e","tags":["Istio","service Mesh","nginmesh"],"title":"Nginx开源Service Mesh组件Nginmesh安装指南","type":"post","url":"/2018/01/02/nginmesh-install/","weight":0,"wordcount":2677},{"author":null,"categories":["Tech"],"content":"我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。","date":1511870400,"description":"我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。","dir":"post/","excerpt_html":"我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。","excerpt_text":"我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。","expirydate":-62135596800,"fuzzywordcount":5600,"html":"我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。","keywords":null,"kind":"page","lang":"en","lastmod":1511870400,"objectID":"62314fd01037305fcf6b8c9ad3b3b02d","permalink":"https://LL1105.github.io/2017/11/28/access-application-from-outside/","publishdate":"2017-11-28T12:00:00Z","readingtime":12,"relpermalink":"/2017/11/28/access-application-from-outside/","section":"post","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。\u003c/p\u003e","tags":["Kubernetes"],"title":"如何从外部访问Kubernetes集群中的应用？","type":"post","url":"/2017/11/28/access-application-from-outside/","weight":0,"wordcount":5543},{"author":null,"categories":["Tech"],"content":"当应用上线以后，运维面临的一大挑战是如何能在不影响已上线业务的情况下进行升级。本文将介绍如何使用Istio实现应用的灰度发布（金丝雀发布）","date":1510153200,"description":"当应用上线以后，运维面临的一大挑战是如何能在不影响已上线业务的情况下进行升级。本文将介绍如何使用Istio实现应用的灰度发布（金丝雀发布）","dir":"post/","excerpt_html":"当应用上线以后，运维面临的一大挑战是如何能在不影响已上线业务的情况下进行升级。本文将介绍如何使用Istio实现应用的灰度发布（金丝雀发布）","excerpt_text":"当应用上线以后，运维面临的一大挑战是如何能在不影响已上线业务的情况下进行升级。本文将介绍如何使用Istio实现应用的灰度发布（金丝雀发布）","expirydate":-62135596800,"fuzzywordcount":3300,"html":"当应用上线以后，运维面临的一大挑战是如何能在不影响已上线业务的情况下进行升级。本文将介绍如何使用Istio实现应用的灰度发布（金丝雀发布）","keywords":null,"kind":"page","lang":"en","lastmod":1510153200,"objectID":"320d9f0641802d90086c08b5cf554c4d","permalink":"https://LL1105.github.io/2017/11/08/istio-canary-release/","publishdate":"2017-11-08T15:00:00Z","readingtime":7,"relpermalink":"/2017/11/08/istio-canary-release/","section":"post","summary":"灰度发布（又名金丝雀发布）介绍 当应用上线以后，运维面临的一大挑战是如何能够在不影响已上线业务的情况下进行升级。做过产品的同学都清楚，不管在发","tags":["Istio"],"title":"采用Istio实现灰度发布(金丝雀发布)","type":"post","url":"/2017/11/08/istio-canary-release/","weight":0,"wordcount":3210},{"author":null,"categories":["Tech"],"content":"本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。","date":1510012800,"description":"本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。","dir":"post/","excerpt_html":"本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。","excerpt_text":"本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。","expirydate":-62135596800,"fuzzywordcount":1400,"html":"本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。","keywords":null,"kind":"page","lang":"en","lastmod":1510012800,"objectID":"5ae8190e8b21dc18fae6ba6a26ad2f8e","permalink":"https://LL1105.github.io/2017/11/07/istio-traffic-shifting/","publishdate":"2017-11-07T00:00:00Z","readingtime":3,"relpermalink":"/2017/11/07/istio-traffic-shifting/","section":"post","summary":"\u003cp\u003e关于Istio的更多内容请参考\u003ca href=\"http://istio.doczh.cn/\"\u003eistio中文文档\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e原文参见\u003ca href=\"https://istio.io/docs/tasks/traffic-management/traffic-shifting.html\"\u003eTraffic Shifting\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。\u003c/p\u003e","tags":["Istio"],"title":"使用Istio实现应用流量转移","type":"post","url":"/2017/11/07/istio-traffic-shifting/","weight":0,"wordcount":1313},{"author":null,"categories":["Tech"],"content":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","date":1509796800,"description":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","dir":"post/","excerpt_html":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","excerpt_text":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","expirydate":-62135596800,"fuzzywordcount":5600,"html":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","keywords":null,"kind":"page","lang":"en","lastmod":1509796800,"objectID":"d993f98f09d7341809e97a3c1ba8e960","permalink":"https://LL1105.github.io/2017/11/04/istio-install_and_example/","publishdate":"2017-11-04T12:00:00Z","readingtime":12,"relpermalink":"/2017/11/04/istio-install_and_example/","section":"post","summary":"\u003ch2 id=\"服务网格简介\"\u003e服务网格简介\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e服务网格\u003c/strong\u003e（Service Mesh）是为解决微服务的通信和治理而出现的一种\u003cstrong\u003e架构模式\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e服务网格将服务间通讯以及与此相关的管理控制功能从业务程序中下移到一个基础设施层，从而彻底隔离了业务逻辑和服务通讯两个关注点。采用服务网格后，应用开发者只需要关注并实现应用业务逻辑。服务之间的通信，包括服务发现，通讯的可靠性，通讯的安全性，服务路由等由服务网格层进行处理，并对应用程序透明。\u003c/p\u003e","tags":["Istio"],"title":"Istio及Bookinfo示例程序安装试用笔记","type":"post","url":"/2017/11/04/istio-install_and_example/","weight":0,"wordcount":5529},{"author":null,"categories":null,"content":null,"date":1509753600,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1509753600,"objectID":"cf37d97d83d29e7c3f79c50c928a7a4d","permalink":"https://LL1105.github.io/2017/11/03/hello-world/","publishdate":"2017-11-04T00:00:00Z","readingtime":1,"relpermalink":"/2017/11/03/hello-world/","section":"post","summary":"“Yeah It\u0026rsquo;s on. ” Hello World!","tags":null,"title":"Welcome to Zhaohuabing Blog","type":"post","url":"/2017/11/03/hello-world/","weight":0,"wordcount":10},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://LL1105.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"关于我 欢迎大家访问我的博客网站。 若有问题请在评论区留言。 本网站使用hugo构建，主题为CleanWhite。","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":54},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b46ad1b2d08f81e89ffa903098dca464","permalink":"https://LL1105.github.io/post/assert/oebps/text/00/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/assert/oebps/text/00/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 03-从0开始学架构 03-从0开始学架构","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/00/","weight":0,"wordcount":30},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e0e187cce809656f6757aa71a20f0729","permalink":"https://LL1105.github.io/post/assert/oebps/text/01/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/post/assert/oebps/text/01/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 开篇词 | 照着做，你也能成为架构师！ 开篇词 | 照着做，你也能成为架构师！ 每个程序员心中都有一个成为架构师的梦想，梦想是美好的","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/01/","weight":0,"wordcount":1988},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9d11bffe2b4f67c76b0beed2d5fab570","permalink":"https://LL1105.github.io/post/assert/oebps/text/02/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/02/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 01 | 架构到底是指什么？ 01 | 架构到底是指什么？ 对于技术人员来说，“架构”是一个再常见不过的词了。我们会对新员工培训整个系统","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/02/","weight":0,"wordcount":3088},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"aad6c6c19b818a1ea3ee636e6e7bbdd1","permalink":"https://LL1105.github.io/post/assert/oebps/text/03/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/03/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 02 | 架构设计的历史背景 02 | 架构设计的历史背景 理解了架构的有关概念和定义之后，今天，我会给你讲讲架构设计的历史背景。我认为","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/03/","weight":0,"wordcount":4079},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"02b1317c257ad8f69603b7f871b56855","permalink":"https://LL1105.github.io/post/assert/oebps/text/04/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/04/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 03 | 架构设计的目的 03 | 架构设计的目的 周二，我们聊了架构出现的历史背景和推动因素。以史为鉴，对我们了解架构设计的目的很有帮","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/04/","weight":0,"wordcount":3628},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2055b2b23735a64eca90169711dbdb8d","permalink":"https://LL1105.github.io/post/assert/oebps/text/05/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/post/assert/oebps/text/05/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 04 | 复杂度来源：高性能 04 | 复杂度来源：高性能 周四，我为你讲了架构设计的主要目的是为了解决软件系统复杂度带来的问题。那么从","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/05/","weight":0,"wordcount":5874},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"21ad131849f10f7d6949c81ee19b80ee","permalink":"https://LL1105.github.io/post/assert/oebps/text/06/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/06/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 05 | 复杂度来源：高可用 05 | 复杂度来源：高可用 今天，我们聊聊复杂度的第二个来源高可用。 参考维基百科，先来看看高可用的定义。","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/06/","weight":0,"wordcount":4065},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"987a19a50684771c1c83dc7e7e29a306","permalink":"https://LL1105.github.io/post/assert/oebps/text/07/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/assert/oebps/text/07/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 06 | 复杂度来源：可扩展性 06 | 复杂度来源：可扩展性 复杂度来源前面已经讲了高性能和高可用，今天来聊聊可扩展性。 可扩展性指系统","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/07/","weight":0,"wordcount":2642},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d0eba8466ef4a740c524d262c9421725","permalink":"https://LL1105.github.io/post/assert/oebps/text/08/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/post/assert/oebps/text/08/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 07 | 复杂度来源：低成本、安全、规模 07 | 复杂度来源：低成本、安全、规模 关于复杂度来源，前面的专栏已经讲了高性能、高可用和可","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/08/","weight":0,"wordcount":4592},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"16861503fd8e5af098840efc3279a222","permalink":"https://LL1105.github.io/post/assert/oebps/text/09/","publishdate":"0001-01-01T00:00:00Z","readingtime":13,"relpermalink":"/post/assert/oebps/text/09/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 08 | 架构设计三原则 08 | 架构设计三原则 前面几期专栏，我跟你系统的聊了架构设计的主要目的是为了解决软件系统复杂度带来的问题，","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/09/","weight":0,"wordcount":6095},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a2456861294ecafd7dd054a7ca45a3a7","permalink":"https://LL1105.github.io/post/assert/oebps/text/10/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/10/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 09 | 架构设计原则案例 09 | 架构设计原则案例 周二，我给你介绍了架构设计的三条核心原则，先复习一下：合适原则、简单原则和演化原","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/10/","weight":0,"wordcount":4379},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"5cff1e09cd472fa1f99da2f1ba726eeb","permalink":"https://LL1105.github.io/post/assert/oebps/text/11/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/11/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 10 | 架构设计流程：识别复杂度 10 | 架构设计流程：识别复杂度 从今天开始，我将分 4 期，结合复杂度来源和架构设计原则，通过一个模","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/11/","weight":0,"wordcount":3554},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"370b1a8a2c37bdc503a6d576ad43163c","permalink":"https://LL1105.github.io/post/assert/oebps/text/12/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/12/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 11 | 架构设计流程：设计备选方案 11 | 架构设计流程：设计备选方案 上一期我讲了架构设计流程第 1 步识别复杂度，确定了系统面临的主","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/12/","weight":0,"wordcount":3943},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"fd3b61632f41bd2110621a5165258dc0","permalink":"https://LL1105.github.io/post/assert/oebps/text/13/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/post/assert/oebps/text/13/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 12 | 架构设计流程：评估和选择备选方案 12 | 架构设计流程：评估和选择备选方案 上一期我讲了设计备选方案，在完成备选方案设计后，","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/13/","weight":0,"wordcount":5524},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ea2bd2b78771eedb45cdc4e9f27e5fa6","permalink":"https://LL1105.github.io/post/assert/oebps/text/14/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/assert/oebps/text/14/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 13 | 架构设计流程：详细方案设计 13 | 架构设计流程：详细方案设计 完成备选方案的设计和选择后，我们终于可以长出一口气，因为整个","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/14/","weight":0,"wordcount":2895},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1c79bbb97be24d54818c298f7a40893c","permalink":"https://LL1105.github.io/post/assert/oebps/text/15/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/15/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 14 | 高性能数据库集群：读写分离 14 | 高性能数据库集群：读写分离 “从 0 开始学架构”专栏已经更新了 13 期，从各个方面阐述了架构设","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/15/","weight":0,"wordcount":3519},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"5702354d1138efecd03a36025cf016c0","permalink":"https://LL1105.github.io/post/assert/oebps/text/16/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/post/assert/oebps/text/16/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 15 | 高性能数据库集群：分库分表 15 | 高性能数据库集群：分库分表 上期我讲了“读写分离”，读写分离分散了数据库读写操作的压力，","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/16/","weight":0,"wordcount":5436},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b0e7a0506f9e0443e6dd1146225e9e3e","permalink":"https://LL1105.github.io/post/assert/oebps/text/17/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/post/assert/oebps/text/17/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 16 | 高性能NoSQL 16 | 高性能NoSQL 关系数据库经过几十年的发展后已经非常成熟，强大的 SQL 功能和 ACID 的属性，使得关系数据库","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/17/","weight":0,"wordcount":5491},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d74d7dabe71d5914277b767e1b71b091","permalink":"https://LL1105.github.io/post/assert/oebps/text/18/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/18/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 17 | 高性能缓存架构 17 | 高性能缓存架构 虽然我们可以通过各种手段来提升存储系统的性能，但在某些复杂的业务场景下，单纯依靠存储","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/18/","weight":0,"wordcount":3507},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1f0e1a987a75b14185232241179fb3fe","permalink":"https://LL1105.github.io/post/assert/oebps/text/19/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/19/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 18 | 单服务器高性能模式：PPC与TPC 18 | 单服务器高性能模式：PPC与TPC 高性能是每个程序员的追求，无论我们是做一个系","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/19/","weight":0,"wordcount":3256},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"269831aab4667521c25f8ac29ad65cbb","permalink":"https://LL1105.github.io/post/assert/oebps/text/20/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/20/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 19 | 单服务器高性能模式：Reactor与Proactor 19 | 单服务器高性能模式：Reactor与Proactor 专栏上一","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/20/","weight":0,"wordcount":4430},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0a641ed4abe18d0c17887d282e6596e0","permalink":"https://LL1105.github.io/post/assert/oebps/text/21/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/21/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 20 | 高性能负载均衡：分类及架构 20 | 高性能负载均衡：分类及架构 单服务器无论如何优化，无论采用多好的硬件，总会有一个性能天花","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/21/","weight":0,"wordcount":3127},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"dd1e6dd83e009511d6dd39ce596124ae","permalink":"https://LL1105.github.io/post/assert/oebps/text/22/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/assert/oebps/text/22/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 21 | 高性能负载均衡：算法 21 | 高性能负载均衡：算法 负载均衡算法数量较多，而且可以根据一些业务特性进行定制开发，抛开细节上的","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/22/","weight":0,"wordcount":2959},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2f52cd6921009df27ec70001ad5249c3","permalink":"https://LL1105.github.io/post/assert/oebps/text/23/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/23/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 22 | 想成为架构师，你必须知道CAP理论 22 | 想成为架构师，你必须知道CAP理论 CAP 定理（CAP theorem）又被称作布鲁尔","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/23/","weight":0,"wordcount":3986},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"46ef3a1fe8dcfae7900a464a05326533","permalink":"https://LL1105.github.io/post/assert/oebps/text/24/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/post/assert/oebps/text/24/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 23 | 想成为架构师，你必须掌握的CAP细节 23 | 想成为架构师，你必须掌握的CAP细节 理论的优点在于清晰简洁、易于理解，但缺点","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/24/","weight":0,"wordcount":4798},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8ff3a37595ec2ab6070b0fb61bd1eb16","permalink":"https://LL1105.github.io/post/assert/oebps/text/25/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/25/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 24 | FMEA方法，排除架构可用性隐患的利器 24 | FMEA方法，排除架构可用性隐患的利器 我在前面的专栏分析高可用复杂度的时候","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/25/","weight":0,"wordcount":4214},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"32d5f15c04238472afca5deabb6ba1a6","permalink":"https://LL1105.github.io/post/assert/oebps/text/26/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/post/assert/oebps/text/26/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 25 | 高可用存储架构：双机架构 25 | 高可用存储架构：双机架构 存储高可用方案的本质都是通过将数据复制到多个存储设备，通过数据冗","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/26/","weight":0,"wordcount":5068},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"19228dfc15b0a278368838d5edb2aae5","permalink":"https://LL1105.github.io/post/assert/oebps/text/27/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/post/assert/oebps/text/27/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 26 | 高可用存储架构：集群和分区 26 | 高可用存储架构：集群和分区 上一期我讲了高可用存储架构中常见的双机架构，分别为主备复制、","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/27/","weight":0,"wordcount":4604},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b8748f192cf13dfb53d2978e4988f4a6","permalink":"https://LL1105.github.io/post/assert/oebps/text/28/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/28/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 27 | 如何设计计算高可用架构？ 27 | 如何设计计算高可用架构？ 计算高可用的主要设计目标是当出现部分硬件损坏时，计算任务能够继续","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/28/","weight":0,"wordcount":3813},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"56ff2e71e41eeb1122f43fe34c9176ab","permalink":"https://LL1105.github.io/post/assert/oebps/text/29/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/29/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 28 | 业务高可用的保障：异地多活架构 28 | 业务高可用的保障：异地多活架构 无论是高可用计算架构，还是高可用存储架构，其本质的设","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/29/","weight":0,"wordcount":4101},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"39751c93383639792abc7b16d4243057","permalink":"https://LL1105.github.io/post/assert/oebps/text/30/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/post/assert/oebps/text/30/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 29 | 异地多活设计4大技巧 29 | 异地多活设计4大技巧 专栏上一期我介绍了三种不同类型的异地多活架构，复习一下每个架构的关键点：","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/30/","weight":0,"wordcount":5721},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4271011d714acfd164ec1e96b6b3d89a","permalink":"https://LL1105.github.io/post/assert/oebps/text/31/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/31/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 30 | 异地多活设计4步走 30 | 异地多活设计4步走 上一期，基于异地多活架构设计复杂度最高的“跨城异地”，我结合自己的经验总结了","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/31/","weight":0,"wordcount":3989},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3278b46d79b9f353580f791db01202b1","permalink":"https://LL1105.github.io/post/assert/oebps/text/32/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/32/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 31 | 如何应对接口级的故障？ 31 | 如何应对接口级的故障？ 异地多活方案主要应对系统级的故障，例如，机器宕机、机房故障、网络故障","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/32/","weight":0,"wordcount":3308},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"be19ce5bcb01c8ffe02c8a854da66d4c","permalink":"https://LL1105.github.io/post/assert/oebps/text/33/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/33/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 32 | 可扩展架构的基本思想和模式 32 | 可扩展架构的基本思想和模式 软件系统与硬件和建筑系统最大的差异在于软件是可扩展的，一个硬","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/33/","weight":0,"wordcount":3149},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b48235d583c4440da10d104a1ec37b54","permalink":"https://LL1105.github.io/post/assert/oebps/text/34/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/post/assert/oebps/text/34/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 33 | 传统的可扩展架构模式：分层架构和SOA 33 | 传统的可扩展架构模式：分层架构和SOA 相比于高性能、高可用架构模式在最近几","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/34/","weight":0,"wordcount":5001},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2c0da76b5e895bdbc230ccac72f63d51","permalink":"https://LL1105.github.io/post/assert/oebps/text/35/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/post/assert/oebps/text/35/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 34 | 深入理解微服务架构：银弹 or 焦油坑？ 34 | 深入理解微服务架构：银弹 or 焦油坑？ 微服务是近几年非常火热的架构设计理念，大部分","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/35/","weight":0,"wordcount":4623},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"251524ab06a1e09e7e38d05774c80317","permalink":"https://LL1105.github.io/post/assert/oebps/text/36/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/36/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 35 | 微服务架构最佳实践 - 方法篇 35 | 微服务架构最佳实践 - 方法篇 专栏上一期，我谈了实施微服务需要避免踩的陷阱，简单提炼为： 微","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/36/","weight":0,"wordcount":3621},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3483ae3508b41e195ad38d08abc813e8","permalink":"https://LL1105.github.io/post/assert/oebps/text/37/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/37/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 36 | 微服务架构最佳实践 - 基础设施篇 36 | 微服务架构最佳实践 - 基础设施篇 每项微服务基础设施都是一个平台、一个系统、一个解决方","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/37/","weight":0,"wordcount":4399},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7d966451c5cf780e84ca18a12148abe4","permalink":"https://LL1105.github.io/post/assert/oebps/text/38/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/38/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 37 | 微内核架构详解 37 | 微内核架构详解 微内核架构（Microkernel Architecture），也被称为插件化架构（P","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/38/","weight":0,"wordcount":3909},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ebb0b31bf30b8d1882eff056411f5c7c","permalink":"https://LL1105.github.io/post/assert/oebps/text/39/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/post/assert/oebps/text/39/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 38 | 架构师应该如何判断技术演进的方向？ 38 | 架构师应该如何判断技术演进的方向？ 互联网的出现不但改变了普通人的生活方式，同时","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/39/","weight":0,"wordcount":5272},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9238327e8e653cf210259488ad0cffe0","permalink":"https://LL1105.github.io/post/assert/oebps/text/40/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/40/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 39 | 互联网技术演进的模式 39 | 互联网技术演进的模式 由于各行业的业务发展轨迹并不完全相同，无法给出一个统一的模板让所有的架构","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/40/","weight":0,"wordcount":4038},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cc03e14a4b8934d8595a54cd26dfc8ae","permalink":"https://LL1105.github.io/post/assert/oebps/text/41/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/41/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 40 | 互联网架构模板：“存储层”技术 40 | 互联网架构模板：“存储层”技术 很多人对于 BAT 的技术有一种莫名的崇拜感，觉得只有天才才","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/41/","weight":0,"wordcount":3323},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"956df0ba64796bcd17ef95f3c29f3d50","permalink":"https://LL1105.github.io/post/assert/oebps/text/42/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/42/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 41 | 互联网架构模板：“开发层”和“服务层”技术 41 | 互联网架构模板：“开发层”和“服务层”技术 上一期，我介绍了互联网架构模","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/42/","weight":0,"wordcount":3990},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b9f5f4f763aa01ad46caa22bc1e04fa5","permalink":"https://LL1105.github.io/post/assert/oebps/text/43/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/43/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 42 | 互联网架构模板：“网络层”技术 42 | 互联网架构模板：“网络层”技术 除了复杂度，互联网业务发展的另外两个关键特点是“高性","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/43/","weight":0,"wordcount":3398},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"add9e9eab2681837f1e834a44ba1597e","permalink":"https://LL1105.github.io/post/assert/oebps/text/44/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/44/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 43 | 互联网架构模板：“用户层”和“业务层”技术 43 | 互联网架构模板：“用户层”和“业务层”技术 上一期，我从计算机网络层的角","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/44/","weight":0,"wordcount":3042},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"49372ad296b99b3750d316a70b7857d9","permalink":"https://LL1105.github.io/post/assert/oebps/text/45/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/assert/oebps/text/45/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 44 | 互联网架构模板：“平台”技术 44 | 互联网架构模板：“平台”技术 当业务规模比较小、系统复杂度不高时，运维、测试、数据分析","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/45/","weight":0,"wordcount":3705},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"38fa8bf3f9cd01ae0fc317e9ecb82bd4","permalink":"https://LL1105.github.io/post/assert/oebps/text/46/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/46/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 45 | 架构重构内功心法第一式：有的放矢 45 | 架构重构内功心法第一式：有的放矢 在专栏第 8 期“架构设计三原则”中的演化原则部分，","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/46/","weight":0,"wordcount":3346},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2700,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c8448abd1f4cc0a137bfb0007917c56f","permalink":"https://LL1105.github.io/post/assert/oebps/text/47/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/assert/oebps/text/47/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 46 | 架构重构内功心法第二式：合纵连横 46 | 架构重构内功心法第二式：合纵连横 上一期我给你讲了我的架构重构内功心法的第一式：有","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/47/","weight":0,"wordcount":2654},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c3695f3055f4a21d177327fb6d241eb4","permalink":"https://LL1105.github.io/post/assert/oebps/text/48/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/assert/oebps/text/48/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 47 | 架构重构内功心法第三式：运筹帷幄 47 | 架构重构内功心法第三式：运筹帷幄 在前面的架构重构内功心法“有的放矢”和“合纵连横","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/48/","weight":0,"wordcount":2846},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d2bc31d3b428a141ad77320a2373adea","permalink":"https://LL1105.github.io/post/assert/oebps/text/49/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/post/assert/oebps/text/49/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 48 | 再谈开源项目：如何选择、使用以及二次开发？ 48 | 再谈开源项目：如何选择、使用以及二次开发？ 我在专栏特别放送第 3 期谈了如","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/49/","weight":0,"wordcount":4590},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f4a56ba170b5f7707633173feeea6d3b","permalink":"https://LL1105.github.io/post/assert/oebps/text/50/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/post/assert/oebps/text/50/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 49 | 谈谈App架构的演进 49 | 谈谈App架构的演进 专栏截止到上一期，架构设计相关的理念、技术、实践已经基本讲完，相信你一路","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/50/","weight":0,"wordcount":3320},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0dcaac5697a8a8aaf56a060366799f01","permalink":"https://LL1105.github.io/post/assert/oebps/text/51/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/post/assert/oebps/text/51/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 50 | 架构实战：架构设计文档模板 50 | 架构实战：架构设计文档模板 在前面的专栏里，有同学留言说想看看具体的架构设计文档。由于信","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/51/","weight":0,"wordcount":4345},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"123239ec1e446ab9c4fe642b46a52199","permalink":"https://LL1105.github.io/post/assert/oebps/text/52/","publishdate":"0001-01-01T00:00:00Z","readingtime":11,"relpermalink":"/post/assert/oebps/text/52/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 如何高效地学习开源项目 | “华仔，放学别走！” 第3期 如何高效地学习开源项目 | “华仔，放学别走！” 第3期 你好，我是华仔。今天","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/52/","weight":0,"wordcount":5129},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"96784e54790340263652a6f851c3cbdd","permalink":"https://LL1105.github.io/post/assert/oebps/text/53/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/assert/oebps/text/53/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 新书首发 | 《从零开始学架构》 新书首发 | 《从零开始学架构》 你好，我是李运华。在完成「从 0 开始学架构」专栏后，今天又有一件意","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/53/","weight":0,"wordcount":524},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3d5c3889b1361af9093e385e27da8a16","permalink":"https://LL1105.github.io/post/assert/oebps/text/54/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/post/assert/oebps/text/54/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 架构专栏特别放送 | “华仔，放学别走！”第1期 架构专栏特别放送 | “华仔，放学别走！”第1期 各位同学，晚上好，我就是那位在每","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/54/","weight":0,"wordcount":2467},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"48330ef1718f7857915e8fa23d0acc05","permalink":"https://LL1105.github.io/post/assert/oebps/text/55/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/assert/oebps/text/55/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 架构专栏特别放送 | “华仔，放学别走！” 第2期 架构专栏特别放送 | “华仔，放学别走！” 第2期 各位同学，晚上好，我是架构专栏的","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/55/","weight":0,"wordcount":2784},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"fccaeab4bcadc831ea790f1b4322f6c1","permalink":"https://LL1105.github.io/post/assert/oebps/text/56/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/post/assert/oebps/text/56/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 架构师必读书单 | “华仔，放学别走！” 第5期 架构师必读书单 | “华仔，放学别走！” 第5期 你好，我是华仔。 在专栏更新的时候，很","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/56/","weight":0,"wordcount":2437},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"10c7b2ce7ab7d1591ed3456f763b1f56","permalink":"https://LL1105.github.io/post/assert/oebps/text/57/","publishdate":"0001-01-01T00:00:00Z","readingtime":13,"relpermalink":"/post/assert/oebps/text/57/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 架构师成长之路 | “华仔，放学别走！” 第4期 架构师成长之路 | “华仔，放学别走！” 第4期 你好，我是华仔。《从 0 开始学架构》专","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/57/","weight":0,"wordcount":6106},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2f22073af22a8ba019b3bdb20b1e939e","permalink":"https://LL1105.github.io/post/assert/oebps/text/58/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/assert/oebps/text/58/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 致「从0开始学架构」专栏订阅用户 致「从0开始学架构」专栏订阅用户 你好，我是华仔。在我的专栏结束后，今天又有一个好消息想分","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/58/","weight":0,"wordcount":390},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/assert/OEBPS/Text/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2815a0c17e33028ba08e10d4a69738d6","permalink":"https://LL1105.github.io/post/assert/oebps/text/59/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/post/assert/oebps/text/59/","section":"post","summary":"\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"\u003e 结束语 | 坚持，成就你的技术梦想 结束语 | 坚持，成就你的技术梦想 “从 0 开始学架构”专栏历经 4 个月的时间，现在到了跟你说再见的","tags":null,"title":"","type":"post","url":"/post/assert/oebps/text/59/","weight":0,"wordcount":1757},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"69e61ff0f90285a3586673668fbb01ca","permalink":"https://LL1105.github.io/post/http%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/","publishdate":"0001-01-01T00:00:00Z","readingtime":8,"relpermalink":"/post/http%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/","section":"post","summary":"HTTP协议版本 HTTP/0.9 ：只支持Get方法，不支持多媒体内通的MIME类型、各种HTTP首部、版本号等。 HTTP/1.0 ：相对于0.9版本，添加了版本号、各种H","tags":null,"title":"","type":"post","url":"/post/http%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/","weight":0,"wordcount":3747},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d613d28eaad282f32fff35d87627d891","permalink":"https://LL1105.github.io/post/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/","section":"post","summary":"Serial GC JDK6及以前的版本的默认GC，包括Serial和Serial Old Parallel GC JDK7、8的默认GC，包括新生代的Parallel Scavenge","tags":null,"title":"","type":"post","url":"/post/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/","weight":0,"wordcount":282},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"09bec5931a5b261ba854dd50efedd5c6","permalink":"https://LL1105.github.io/post/linux%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B%E7%9A%84/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/post/linux%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B%E7%9A%84/","section":"post","summary":"Linux的进程 首先我们看下进程的定义：进程就是处于执行期的程序。 我们知道，进程是操作系统资源分配的基本单位，每个进程有独属于自己的虚拟空间","tags":null,"title":"","type":"post","url":"/post/linux%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B%E7%9A%84/","weight":0,"wordcount":1887},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4c6abc4c150a9e17549a5e3869d8930d","permalink":"https://LL1105.github.io/post/%E4%BA%A4%E6%98%93%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/post/%E4%BA%A4%E6%98%93%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/","section":"post","summary":"一. 概述 交易引擎是金融系统的核心组件，用于处理买卖订单的撮合、账户管理、清算与结算、 风险控制等。一个优秀的交易引擎需要具备高性能、高可用性、","tags":null,"title":"","type":"post","url":"/post/%E4%BA%A4%E6%98%93%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/","weight":0,"wordcount":1367},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c03c82c642690a71b2a72d2e39081de4","permalink":"https://LL1105.github.io/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","section":"post","summary":"附属表 基因法","tags":null,"title":"","type":"post","url":"/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","weight":0,"wordcount":6},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"44ab493f918fdc85197c462088c7a1ba","permalink":"https://LL1105.github.io/post/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%8E%92%E6%9F%A5%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%8E%92%E6%9F%A5%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","section":"post","summary":"","tags":null,"title":"","type":"post","url":"/post/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%8E%92%E6%9F%A5%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"35b91e201557c015de8febcdf44b484f","permalink":"https://LL1105.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%85%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%85%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","section":"post","summary":"缓存双写一致性 缓存双写一致性是分布式系统中处理缓存（如Redis、Memcached）与数据库（如MySQL）数据同步问题的核心挑战，指在对","tags":null,"title":"","type":"post","url":"/post/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%85%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","weight":0,"wordcount":2557},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"archive/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://LL1105.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"历史文章归档","type":"archive","url":"/archive/","weight":0,"wordcount":0}]