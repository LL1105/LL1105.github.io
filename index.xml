<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TingYu Coding Blog</title>
    <link>https://LL1105.github.io/</link>
    <description>Recent content on TingYu Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 30 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://LL1105.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis限流——使用Redis Cluster突破单Redis限流瓶颈</title>
      <link>https://LL1105.github.io/post/redis%E9%99%90%E6%B5%81%E4%BD%BF%E7%94%A8redis-cluster%E7%AA%81%E7%A0%B4%E5%8D%95redis%E9%99%90%E6%B5%81%E7%93%B6%E9%A2%88/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/redis%E9%99%90%E6%B5%81%E4%BD%BF%E7%94%A8redis-cluster%E7%AA%81%E7%A0%B4%E5%8D%95redis%E9%99%90%E6%B5%81%E7%93%B6%E9%A2%88/</guid>
      <description>概述 当我们借助Redis实现分布式限流时，通常会根据将一个限流key放在一个Redis节点上，例如使用Redission的限流： RRateLimiter rateLimiter = redissonClient.getRateLimiter(&amp;#34;rate:limiter:key&amp;#34;); rateLimiter.trySetRate( RateType.OVERALL,</description>
    </item>
    <item>
      <title>详解SpringMVC处理流程</title>
      <link>https://LL1105.github.io/post/%E8%AF%A6%E8%A7%A3springmvc%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/%E8%AF%A6%E8%A7%A3springmvc%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid>
      <description>前言 在Spring MVC中，处理一个Web请求的流程被设计得非常清晰且高效，从客户端的请求发送到最终的响应返回，整个过程涵盖了多个核心组件的</description>
    </item>
    <item>
      <title>带权轮询负载均衡探讨</title>
      <link>https://LL1105.github.io/post/%E5%B8%A6%E6%9D%83%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/</link>
      <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/%E5%B8%A6%E6%9D%83%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E6%8E%A2%E8%AE%A8/</guid>
      <description>带权轮询负载均衡业务场景 负载均衡是在请求资源时，当资源有多个，我们应该请求哪一个才能让资源利用率最大化的方法。 轮询是最简单粗暴的一种策略，这</description>
    </item>
    <item>
      <title>Clean White Theme for Hugo</title>
      <link>https://LL1105.github.io/post/readme/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/readme/</guid>
      <description>Clean White Theme for Hugo CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live demo site using this theme. It is based on huxblog Jekyll Theme and Clean Blog Jekyll Theme. These two upstream projects have done awesome jobs to create a blog theme, what I&amp;rsquo;m doing here is porting it to Hugo, of which I like the simplicity and the much faster</description>
    </item>
    <item>
      <title>Istio v1aplha3 routing API介绍(译文）</title>
      <link>https://LL1105.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid>
      <description>&lt;p&gt;到目前为止，Istio提供了一个简单的API来进行流量管理，该API包括了四种资源：RouteRule，DestinationPolicy，EgressRule和Ingress（直接使用了Kubernets的Ingress资源）。借助此API，用户可以轻松管理Istio服务网格中的流量。该API允许用户将请求路由到特定版本的服务，为弹性测试注入延迟和失败，添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio 0.8 Release发布</title>
      <link>https://LL1105.github.io/2018/06/02/istio08/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/06/02/istio08/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Everything about Setting Up My Ubuntu Desktop</title>
      <link>https://LL1105.github.io/2018/05/24/set_up_my_ubuntu_desktop/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/24/set_up_my_ubuntu_desktop/</guid>
      <description>Generate SSH Key Pair ssh-keygen -C &amp;#34;zhaohuabing@gmail.com&amp;#34; Shadowsocks Install shadowsokcs sudo apt-get install python3-pip sudo pip3 install shadowsocks Create config at config/shadowsocks.json, with the following content: { &amp;#34;server&amp;#34;:&amp;#34;remote-shadowsocks-server-ip-addr&amp;#34;, &amp;#34;server_port&amp;#34;:443, &amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;your-passwd&amp;#34;, &amp;#34;timeout&amp;#34;:300, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;, &amp;#34;fast_open&amp;#34;:false, &amp;#34;workers&amp;#34;:1 } Start a local socks proxy sudo sslocal -c config/shadowsocks.json -d start In case there is an openssl error, modify shadowsocks source file. sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py :%s/cleanup/reset/gc Convert shadowsocks socks proxy to http proxy</description>
    </item>
    <item>
      <title>微服务安全沉思录之三</title>
      <link>https://LL1105.github.io/2018/05/23/external_system_auth/</link>
      <pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/23/external_system_auth/</guid>
      <description>外部系统访问控制 除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的</description>
    </item>
    <item>
      <title>微服务安全沉思录之二</title>
      <link>https://LL1105.github.io/2018/05/23/service_2_service_auth/</link>
      <pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/23/service_2_service_auth/</guid>
      <description>&lt;h2 id=&#34;服务间认证与鉴权&#34;&gt;服务间认证与鉴权&lt;/h2&gt;&#xA;&lt;p&gt;除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户间接触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li&gt;&#xA;&lt;li&gt;非用户触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务安全沉思录之一</title>
      <link>https://LL1105.github.io/2018/05/22/user_authentication_authorization/</link>
      <pubDate>Wed, 23 May 2018 10:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/22/user_authentication_authorization/</guid>
      <description>这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在</description>
    </item>
    <item>
      <title>Istio Sidecar自动注入原理</title>
      <link>https://LL1105.github.io/2018/05/23/istio-auto-injection-with-webhook/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p&gt;&#xA;&lt;p&gt;使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p&gt;&#xA;&lt;p&gt;Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p&gt;</description>
    </item>
    <item>
      <title>川西秘境探险</title>
      <link>https://LL1105.github.io/2018/05/01/may-day-jiulonghu/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/01/may-day-jiulonghu/</guid>
      <description>&lt;h2 id=&#34;寻浮云牧场不遇&#34;&gt;寻浮云牧场不遇&lt;/h2&gt;&#xA;&lt;p&gt;五一节前的一周内，几个朋友就纷纷坐不住了，一个二个不再安心上班，开始在微信群里讨论过节要到哪里耍。&#xA;大家思来想去，最后决定还是去理县方向。因为根据多年自驾的经验，只要出了汶川，沿途都是风景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Helm介绍</title>
      <link>https://LL1105.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>前言 Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Hel</description>
    </item>
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>https://LL1105.github.io/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>Service Mesh vs API Gateway 在前一篇关于Service Mesh的文章中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章</description>
    </item>
    <item>
      <title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title>
      <link>https://LL1105.github.io/2018/03/29/what-is-service-mesh-and-istio/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid>
      <description>&lt;h2 id=&#34;微服务架构的演进&#34;&gt;微服务架构的演进&lt;/h2&gt;&#xA;&lt;p&gt;作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何配置docker使用HTTP代理</title>
      <link>https://LL1105.github.io/2018/03/13/use-docker-behind-http-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/03/13/use-docker-behind-http-proxy/</guid>
      <description>&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;&#xA;&lt;h3 id=&#34;设置docker使用http-proxy&#34;&gt;设置docker使用http proxy&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /etc/default/docker&#xA;&#xA;export http_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export https_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export HTTP_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export HTTPS_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Vim Tips</title>
      <link>https://LL1105.github.io/2018/02/09/vim-tips/</link>
      <pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/02/09/vim-tips/</guid>
      <description>&lt;h2 id=&#34;vim-graphical-cheat-sheet&#34;&gt;vim graphical cheat sheet&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;//img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg&#34; alt=&#34;&#34;&gt;&#xA;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何使用非root用户执行docker命令</title>
      <link>https://LL1105.github.io/2018/02/09/docker-without-sudo/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/02/09/docker-without-sudo/</guid>
      <description>Add the docker group if it doesn&amp;rsquo;t already exist: sudo groupadd docker Add the connected user &amp;ldquo;$USER&amp;rdquo; to the docker group. Change the user name to match your preferred user if you do not want to use your current user: sudo gpasswd -a $USER docker Either do a newgrp docker or log out/in to activate the changes to groups.</description>
    </item>
    <item>
      <title>如何构建安全的微服务应用？</title>
      <link>https://LL1105.github.io/2018/05/22/user_authentication_authorization/</link>
      <pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/05/22/user_authentication_authorization/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx开源Service Mesh组件Nginmesh安装指南</title>
      <link>https://LL1105.github.io/2018/01/02/nginmesh-install/</link>
      <pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2018/01/02/nginmesh-install/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何从外部访问Kubernetes集群中的应用？</title>
      <link>https://LL1105.github.io/2017/11/28/access-application-from-outside/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2017/11/28/access-application-from-outside/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>采用Istio实现灰度发布(金丝雀发布)</title>
      <link>https://LL1105.github.io/2017/11/08/istio-canary-release/</link>
      <pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2017/11/08/istio-canary-release/</guid>
      <description>灰度发布（又名金丝雀发布）介绍 当应用上线以后，运维面临的一大挑战是如何能够在不影响已上线业务的情况下进行升级。做过产品的同学都清楚，不管在发</description>
    </item>
    <item>
      <title>使用Istio实现应用流量转移</title>
      <link>https://LL1105.github.io/2017/11/07/istio-traffic-shifting/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2017/11/07/istio-traffic-shifting/</guid>
      <description>&lt;p&gt;关于Istio的更多内容请参考&lt;a href=&#34;http://istio.doczh.cn/&#34;&gt;istio中文文档&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;原文参见&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/traffic-shifting.html&#34;&gt;Traffic Shifting&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio及Bookinfo示例程序安装试用笔记</title>
      <link>https://LL1105.github.io/2017/11/04/istio-install_and_example/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2017/11/04/istio-install_and_example/</guid>
      <description>&lt;h2 id=&#34;服务网格简介&#34;&gt;服务网格简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;服务网格&lt;/strong&gt;（Service Mesh）是为解决微服务的通信和治理而出现的一种&lt;strong&gt;架构模式&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;服务网格将服务间通讯以及与此相关的管理控制功能从业务程序中下移到一个基础设施层，从而彻底隔离了业务逻辑和服务通讯两个关注点。采用服务网格后，应用开发者只需要关注并实现应用业务逻辑。服务之间的通信，包括服务发现，通讯的可靠性，通讯的安全性，服务路由等由服务网格层进行处理，并对应用程序透明。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Welcome to Zhaohuabing Blog</title>
      <link>https://LL1105.github.io/2017/11/03/hello-world/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/2017/11/03/hello-world/</guid>
      <description>“Yeah It&amp;rsquo;s on. ” Hello World!</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/about/</guid>
      <description>关于我 欢迎大家访问我的博客网站。 若有问题请在评论区留言。 本网站使用hugo构建，主题为CleanWhite。</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/00/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 03-从0开始学架构 03-从0开始学架构</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/01/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 开篇词 | 照着做，你也能成为架构师！ 开篇词 | 照着做，你也能成为架构师！ 每个程序员心中都有一个成为架构师的梦想，梦想是美好的</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/02/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 01 | 架构到底是指什么？ 01 | 架构到底是指什么？ 对于技术人员来说，“架构”是一个再常见不过的词了。我们会对新员工培训整个系统</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/03/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 02 | 架构设计的历史背景 02 | 架构设计的历史背景 理解了架构的有关概念和定义之后，今天，我会给你讲讲架构设计的历史背景。我认为</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/04/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 03 | 架构设计的目的 03 | 架构设计的目的 周二，我们聊了架构出现的历史背景和推动因素。以史为鉴，对我们了解架构设计的目的很有帮</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/05/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 04 | 复杂度来源：高性能 04 | 复杂度来源：高性能 周四，我为你讲了架构设计的主要目的是为了解决软件系统复杂度带来的问题。那么从</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/06/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 05 | 复杂度来源：高可用 05 | 复杂度来源：高可用 今天，我们聊聊复杂度的第二个来源高可用。 参考维基百科，先来看看高可用的定义。</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/07/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 06 | 复杂度来源：可扩展性 06 | 复杂度来源：可扩展性 复杂度来源前面已经讲了高性能和高可用，今天来聊聊可扩展性。 可扩展性指系统</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/08/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 07 | 复杂度来源：低成本、安全、规模 07 | 复杂度来源：低成本、安全、规模 关于复杂度来源，前面的专栏已经讲了高性能、高可用和可</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/09/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 08 | 架构设计三原则 08 | 架构设计三原则 前面几期专栏，我跟你系统的聊了架构设计的主要目的是为了解决软件系统复杂度带来的问题，</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/10/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 09 | 架构设计原则案例 09 | 架构设计原则案例 周二，我给你介绍了架构设计的三条核心原则，先复习一下：合适原则、简单原则和演化原</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/11/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 10 | 架构设计流程：识别复杂度 10 | 架构设计流程：识别复杂度 从今天开始，我将分 4 期，结合复杂度来源和架构设计原则，通过一个模</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/12/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 11 | 架构设计流程：设计备选方案 11 | 架构设计流程：设计备选方案 上一期我讲了架构设计流程第 1 步识别复杂度，确定了系统面临的主</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/13/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 12 | 架构设计流程：评估和选择备选方案 12 | 架构设计流程：评估和选择备选方案 上一期我讲了设计备选方案，在完成备选方案设计后，</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/14/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 13 | 架构设计流程：详细方案设计 13 | 架构设计流程：详细方案设计 完成备选方案的设计和选择后，我们终于可以长出一口气，因为整个</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/15/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 14 | 高性能数据库集群：读写分离 14 | 高性能数据库集群：读写分离 “从 0 开始学架构”专栏已经更新了 13 期，从各个方面阐述了架构设</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/16/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 15 | 高性能数据库集群：分库分表 15 | 高性能数据库集群：分库分表 上期我讲了“读写分离”，读写分离分散了数据库读写操作的压力，</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/17/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 16 | 高性能NoSQL 16 | 高性能NoSQL 关系数据库经过几十年的发展后已经非常成熟，强大的 SQL 功能和 ACID 的属性，使得关系数据库</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/18/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 17 | 高性能缓存架构 17 | 高性能缓存架构 虽然我们可以通过各种手段来提升存储系统的性能，但在某些复杂的业务场景下，单纯依靠存储</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/19/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 18 | 单服务器高性能模式：PPC与TPC 18 | 单服务器高性能模式：PPC与TPC 高性能是每个程序员的追求，无论我们是做一个系</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/20/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 19 | 单服务器高性能模式：Reactor与Proactor 19 | 单服务器高性能模式：Reactor与Proactor 专栏上一</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/21/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 20 | 高性能负载均衡：分类及架构 20 | 高性能负载均衡：分类及架构 单服务器无论如何优化，无论采用多好的硬件，总会有一个性能天花</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/22/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 21 | 高性能负载均衡：算法 21 | 高性能负载均衡：算法 负载均衡算法数量较多，而且可以根据一些业务特性进行定制开发，抛开细节上的</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/23/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 22 | 想成为架构师，你必须知道CAP理论 22 | 想成为架构师，你必须知道CAP理论 CAP 定理（CAP theorem）又被称作布鲁尔</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/24/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 23 | 想成为架构师，你必须掌握的CAP细节 23 | 想成为架构师，你必须掌握的CAP细节 理论的优点在于清晰简洁、易于理解，但缺点</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/25/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 24 | FMEA方法，排除架构可用性隐患的利器 24 | FMEA方法，排除架构可用性隐患的利器 我在前面的专栏分析高可用复杂度的时候</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/26/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 25 | 高可用存储架构：双机架构 25 | 高可用存储架构：双机架构 存储高可用方案的本质都是通过将数据复制到多个存储设备，通过数据冗</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/27/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 26 | 高可用存储架构：集群和分区 26 | 高可用存储架构：集群和分区 上一期我讲了高可用存储架构中常见的双机架构，分别为主备复制、</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/28/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 27 | 如何设计计算高可用架构？ 27 | 如何设计计算高可用架构？ 计算高可用的主要设计目标是当出现部分硬件损坏时，计算任务能够继续</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/29/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 28 | 业务高可用的保障：异地多活架构 28 | 业务高可用的保障：异地多活架构 无论是高可用计算架构，还是高可用存储架构，其本质的设</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/30/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 29 | 异地多活设计4大技巧 29 | 异地多活设计4大技巧 专栏上一期我介绍了三种不同类型的异地多活架构，复习一下每个架构的关键点：</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/31/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/31/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 30 | 异地多活设计4步走 30 | 异地多活设计4步走 上一期，基于异地多活架构设计复杂度最高的“跨城异地”，我结合自己的经验总结了</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/32/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 31 | 如何应对接口级的故障？ 31 | 如何应对接口级的故障？ 异地多活方案主要应对系统级的故障，例如，机器宕机、机房故障、网络故障</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/33/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/33/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 32 | 可扩展架构的基本思想和模式 32 | 可扩展架构的基本思想和模式 软件系统与硬件和建筑系统最大的差异在于软件是可扩展的，一个硬</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/34/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/34/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 33 | 传统的可扩展架构模式：分层架构和SOA 33 | 传统的可扩展架构模式：分层架构和SOA 相比于高性能、高可用架构模式在最近几</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/35/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/35/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 34 | 深入理解微服务架构：银弹 or 焦油坑？ 34 | 深入理解微服务架构：银弹 or 焦油坑？ 微服务是近几年非常火热的架构设计理念，大部分</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/36/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/36/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 35 | 微服务架构最佳实践 - 方法篇 35 | 微服务架构最佳实践 - 方法篇 专栏上一期，我谈了实施微服务需要避免踩的陷阱，简单提炼为： 微</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/37/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/37/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 36 | 微服务架构最佳实践 - 基础设施篇 36 | 微服务架构最佳实践 - 基础设施篇 每项微服务基础设施都是一个平台、一个系统、一个解决方</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/38/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/38/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 37 | 微内核架构详解 37 | 微内核架构详解 微内核架构（Microkernel Architecture），也被称为插件化架构（P</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/39/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/39/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 38 | 架构师应该如何判断技术演进的方向？ 38 | 架构师应该如何判断技术演进的方向？ 互联网的出现不但改变了普通人的生活方式，同时</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/40/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/40/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 39 | 互联网技术演进的模式 39 | 互联网技术演进的模式 由于各行业的业务发展轨迹并不完全相同，无法给出一个统一的模板让所有的架构</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/41/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/41/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 40 | 互联网架构模板：“存储层”技术 40 | 互联网架构模板：“存储层”技术 很多人对于 BAT 的技术有一种莫名的崇拜感，觉得只有天才才</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/42/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/42/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 41 | 互联网架构模板：“开发层”和“服务层”技术 41 | 互联网架构模板：“开发层”和“服务层”技术 上一期，我介绍了互联网架构模</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/43/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/43/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 42 | 互联网架构模板：“网络层”技术 42 | 互联网架构模板：“网络层”技术 除了复杂度，互联网业务发展的另外两个关键特点是“高性</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/44/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/44/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 43 | 互联网架构模板：“用户层”和“业务层”技术 43 | 互联网架构模板：“用户层”和“业务层”技术 上一期，我从计算机网络层的角</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/45/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/45/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 44 | 互联网架构模板：“平台”技术 44 | 互联网架构模板：“平台”技术 当业务规模比较小、系统复杂度不高时，运维、测试、数据分析</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/46/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/46/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 45 | 架构重构内功心法第一式：有的放矢 45 | 架构重构内功心法第一式：有的放矢 在专栏第 8 期“架构设计三原则”中的演化原则部分，</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/47/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/47/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 46 | 架构重构内功心法第二式：合纵连横 46 | 架构重构内功心法第二式：合纵连横 上一期我给你讲了我的架构重构内功心法的第一式：有</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/48/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/48/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 47 | 架构重构内功心法第三式：运筹帷幄 47 | 架构重构内功心法第三式：运筹帷幄 在前面的架构重构内功心法“有的放矢”和“合纵连横</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/49/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/49/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 48 | 再谈开源项目：如何选择、使用以及二次开发？ 48 | 再谈开源项目：如何选择、使用以及二次开发？ 我在专栏特别放送第 3 期谈了如</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/50/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/50/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 49 | 谈谈App架构的演进 49 | 谈谈App架构的演进 专栏截止到上一期，架构设计相关的理念、技术、实践已经基本讲完，相信你一路</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/51/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/51/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 50 | 架构实战：架构设计文档模板 50 | 架构实战：架构设计文档模板 在前面的专栏里，有同学留言说想看看具体的架构设计文档。由于信</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/52/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/52/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 如何高效地学习开源项目 | “华仔，放学别走！” 第3期 如何高效地学习开源项目 | “华仔，放学别走！” 第3期 你好，我是华仔。今天</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/53/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/53/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 新书首发 | 《从零开始学架构》 新书首发 | 《从零开始学架构》 你好，我是李运华。在完成「从 0 开始学架构」专栏后，今天又有一件意</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/54/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 架构专栏特别放送 | “华仔，放学别走！”第1期 架构专栏特别放送 | “华仔，放学别走！”第1期 各位同学，晚上好，我就是那位在每</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/55/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/55/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 架构专栏特别放送 | “华仔，放学别走！” 第2期 架构专栏特别放送 | “华仔，放学别走！” 第2期 各位同学，晚上好，我是架构专栏的</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/56/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/56/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 架构师必读书单 | “华仔，放学别走！” 第5期 架构师必读书单 | “华仔，放学别走！” 第5期 你好，我是华仔。 在专栏更新的时候，很</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/57/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/57/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 架构师成长之路 | “华仔，放学别走！” 第4期 架构师成长之路 | “华仔，放学别走！” 第4期 你好，我是华仔。《从 0 开始学架构》专</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/58/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/58/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 致「从0开始学架构」专栏订阅用户 致「从0开始学架构」专栏订阅用户 你好，我是华仔。在我的专栏结束后，今天又有一个好消息想分</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/assert/oebps/text/59/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/assert/oebps/text/59/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&gt; 结束语 | 坚持，成就你的技术梦想 结束语 | 坚持，成就你的技术梦想 “从 0 开始学架构”专栏历经 4 个月的时间，现在到了跟你说再见的</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/http%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/http%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
      <description>HTTP协议版本 HTTP/0.9 ：只支持Get方法，不支持多媒体内通的MIME类型、各种HTTP首部、版本号等。 HTTP/1.0 ：相对于0.9版本，添加了版本号、各种H</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/img/fullscreenshot.png/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/img/fullscreenshot.png/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/img/sitesearch.png/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/img/sitesearch.png/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>Serial GC JDK6及以前的版本的默认GC，包括Serial和Serial Old Parallel GC JDK7、8的默认GC，包括新生代的Parallel Scavenge</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/linux%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B%E7%9A%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/linux%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B%E7%9A%84/</guid>
      <description>Linux的进程 首先我们看下进程的定义：进程就是处于执行期的程序。 我们知道，进程是操作系统资源分配的基本单位，每个进程有独属于自己的虚拟空间</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/%E4%BA%A4%E6%98%93%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/%E4%BA%A4%E6%98%93%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/</guid>
      <description>一. 概述 交易引擎是金融系统的核心组件，用于处理买卖订单的撮合、账户管理、清算与结算、 风险控制等。一个优秀的交易引擎需要具备高性能、高可用性、</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>附属表 基因法</description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%8E%92%E6%9F%A5%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%8E%92%E6%9F%A5%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://LL1105.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%85%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/post/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%85%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>缓存双写一致性 缓存双写一致性是分布式系统中处理缓存（如Redis、Memcached）与数据库（如MySQL）数据同步问题的核心挑战，指在对</description>
    </item>
    <item>
      <title>历史文章归档</title>
      <link>https://LL1105.github.io/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://LL1105.github.io/archive/</guid>
      <description></description>
    </item>
  </channel>
</rss>
